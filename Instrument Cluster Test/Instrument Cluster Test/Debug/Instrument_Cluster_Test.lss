
Instrument_Cluster_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000630  000006c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080013e  0080013e  00000702  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7b  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0f  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b31  00000000  00000000  000031ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000678  00000000  00000000  00003f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001134  00000000  00000000  000045e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 01 	call	0x392	; 0x392 <main>
  9e:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c__init>:
 {
 }

 void i2c__init(void)
 {
	 PRR &= ~(1<<PRTWI); //The PRTWI bit in Section 9.10 ?Minimizing Power Consumption" on page 36 must be written to zero to enable the 2-wire serial interface
  a6:	e4 e6       	ldi	r30, 0x64	; 100
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
	 TWCR &= ~(1<<TWIE); // If the TWIE bit is cleared, the application must poll the TWINT flag in order to detect actions on the TWI bus
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
	 TWSR &= ~(1<<TWPS0)|(1<<TWPS1); //Sets prescaler value to 1
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	80 83       	st	Z, r24
	 TWBR = 72; //Sets bit rate in TWBR; 72 = 100khz bit rate; 12 =400khz bit rate; calcluate with TWBR_val (((F_CPU / F_SCL) - 16 ) / (2*Prescaler))
  c4:	88 e4       	ldi	r24, 0x48	; 72
  c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
  ca:	08 95       	ret

000000cc <i2c__start>:
 }

 void i2c__start(uint8_t i2c_address)
 {
	 TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Send START condition
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while (!(TWCR & (1<<TWINT)));	//Wait for TWINT flag set. This indicates that the START condition has been transmitted
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c__start+0xa>
	 if ((TWSR & 0xF8) != TW_START) //Check value of TWI status register. Mask prescaler bits. If status different from START go to ERROR
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	 error();
	 TWDR = (i2c_address << 1) | TW_WRITE;; //Sets address/data register to slave address + write
  e0:	88 0f       	add	r24, r24
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	 TWCR = (1<<TWINT) | (1<<TWEN); //Clear TWINT bit in TWCR to start transmission of address
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while (!(TWCR & (1<<TWINT))); //Wait for TWINT flag set. This indicates that the SLA+W has been transmitted, and ACK/NACK has been received.
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <i2c__start+0x24>
	 if ((TWSR & 0xF8) != TW_MT_SLA_ACK) //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_SLA_ACK go to ERROR
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
  fa:	08 95       	ret

000000fc <i2c__write>:
	 error();
 }

 void i2c__write(uint8_t data)
 {
	 TWDR = data;  //Load DATA into TWDR register
  fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	 TWCR = (1<<TWINT) | (1<<TWEN);  //Clear TWINT bit in TWCR to start transmission of data
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	 while(!(TWCR & (1<<TWINT)));  //Wait for TWINT flag set. This indicates that the DATA has been transmitted, and ACK/NACK has been received
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 23       	and	r24, r24
 10e:	ec f7       	brge	.-6      	; 0x10a <i2c__write+0xe>
	 if ((TWSR & 0xF8)!= TW_MT_DATA_ACK)  //Check value of TWI status register. Mask prescaler bits. If status different from TW_MT_DATA_ACK go to ERROR
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 114:	08 95       	ret

00000116 <i2c__stop>:
	 error();
 }

 void i2c__stop(void)
 {
	 TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);  //Transmit STOP condition
 116:	84 e9       	ldi	r24, 0x94	; 148
 118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 11c:	08 95       	ret

0000011e <__vector_11>:
 volatile uint8_t timerTick = 0;
 volatile uint8_t bitstate = 0x7;

 //Interrupt that pulses at 10khz; 100 pulses = 100hz period

 ISR(TIMER1_COMPA_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	 //1 = off; 0 = on
	 if (rpm_flag == 1){
 150:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <rpm_flag>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	a1 f4       	brne	.+40     	; 0x180 <__vector_11+0x62>
		 i2c__start(LED_BAR_1);
 158:	8a e3       	ldi	r24, 0x3A	; 58
 15a:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
		 i2c__write(byte2);
 15e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <byte2>
 162:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
		 i2c__stop();
 166:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
		 
		 i2c__start(LED_BAR_2);
 16a:	89 e3       	ldi	r24, 0x39	; 57
 16c:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
		 i2c__write(byte1);
 170:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <byte1>
 174:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
		 i2c__stop();
 178:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
		 rpm_flag = 0;
 17c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <rpm_flag>
	 }
	 timerTick++;
 180:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
	 if (timerTick >= 100){
 18a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 18e:	84 36       	cpi	r24, 0x64	; 100
 190:	08 f4       	brcc	.+2      	; 0x194 <__vector_11+0x76>
 192:	93 c0       	rjmp	.+294    	; 0x2ba <__vector_11+0x19c>
		 timerTick = 0;
 194:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		 bitstate =0b00000000;
 198:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 19c:	e4 e0       	ldi	r30, 0x04	; 4
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
		 for (uint8_t i = 0; i<3; i++){
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	70 e0       	ldi	r23, 0x00	; 0
	 timerTick++;
	 if (timerTick >= 100){
		 timerTick = 0;
		 bitstate =0b00000000;
		 for (uint8_t i = 0; i<3; i++){
			 if (left_duty_cyles[i] == 0){
 1a8:	21 91       	ld	r18, Z+
 1aa:	21 11       	cpse	r18, r1
 1ac:	0c c0       	rjmp	.+24     	; 0x1c6 <__vector_11+0xa8>
				 bitstate |= (1<<i);
 1ae:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 1b2:	9b 01       	movw	r18, r22
 1b4:	08 2e       	mov	r0, r24
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__vector_11+0x9e>
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <__vector_11+0x9a>
 1c0:	24 2b       	or	r18, r20
 1c2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1c6:	01 96       	adiw	r24, 0x01	; 1
	 }
	 timerTick++;
	 if (timerTick >= 100){
		 timerTick = 0;
		 bitstate =0b00000000;
		 for (uint8_t i = 0; i<3; i++){
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	91 05       	cpc	r25, r1
 1cc:	69 f7       	brne	.-38     	; 0x1a8 <__vector_11+0x8a>
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 1ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <right_duty_cyles>
 1d2:	81 11       	cpse	r24, r1
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <__vector_11+0xc2>
				 bitstate |= (1<<(i+3));
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <right_duty_cyles+0x1>
 1e4:	81 11       	cpse	r24, r1
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <__vector_11+0xd4>
				 bitstate |= (1<<(i+3));
 1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ec:	80 61       	ori	r24, 0x10	; 16
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 if (left_duty_cyles[i] == 0){
				 bitstate |= (1<<i);
			 }
		 }
		 for (uint8_t i = 0; i<3; i++){
			 if (right_duty_cyles[i] == 0){
 1f2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <right_duty_cyles+0x2>
 1f6:	81 11       	cpse	r24, r1
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <__vector_11+0xe6>
				 bitstate |= (1<<(i+3));
 1fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fe:	80 62       	ori	r24, 0x20	; 32
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 }
		 }
		 
		 if (left_indicator_flag == 1){
 204:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <left_indicator_flag>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	29 f4       	brne	.+10     	; 0x216 <__vector_11+0xf8>
			 bitstate |= (1<<6);
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		 }
		 if (right_indicator_flag == 1){
 216:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <right_indicator_flag>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	29 f4       	brne	.+10     	; 0x228 <__vector_11+0x10a>
			 bitstate |= (1<<7);
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 222:	80 68       	ori	r24, 0x80	; 128
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		 }
		 i2c__start(LED_INDICATORS);
 228:	8b e3       	ldi	r24, 0x3B	; 59
 22a:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
		 i2c__write(bitstate);
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 232:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
		 i2c__stop();
 236:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
 23a:	3f c0       	rjmp	.+126    	; 0x2ba <__vector_11+0x19c>
	 }
	 for (uint8_t i = 0; i<3; i++){
		 if (timerTick == left_duty_cyles[i]){
 23c:	f7 01       	movw	r30, r14
 23e:	91 91       	ld	r25, Z+
 240:	7f 01       	movw	r14, r30
 242:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 246:	98 13       	cpse	r25, r24
 248:	15 c0       	rjmp	.+42     	; 0x274 <__vector_11+0x156>
			 bitstate |= (1<<i);
 24a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 24e:	c6 01       	movw	r24, r12
 250:	0c 2e       	mov	r0, r28
 252:	02 c0       	rjmp	.+4      	; 0x258 <__vector_11+0x13a>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <__vector_11+0x136>
 25c:	82 2b       	or	r24, r18
 25e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 i2c__start(LED_INDICATORS);
 262:	8b e3       	ldi	r24, 0x3B	; 59
 264:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
			 i2c__write(bitstate);
 268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 26c:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
			 i2c__stop();
 270:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
		 }
		 if (timerTick == right_duty_cyles[i]){
 274:	f8 01       	movw	r30, r16
 276:	91 91       	ld	r25, Z+
 278:	8f 01       	movw	r16, r30
 27a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 27e:	98 13       	cpse	r25, r24
 280:	17 c0       	rjmp	.+46     	; 0x2b0 <__vector_11+0x192>
			 bitstate |= (1<<(i+3));
 282:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 286:	ce 01       	movw	r24, r28
 288:	03 96       	adiw	r24, 0x03	; 3
 28a:	a6 01       	movw	r20, r12
 28c:	02 c0       	rjmp	.+4      	; 0x292 <__vector_11+0x174>
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <__vector_11+0x170>
 296:	ca 01       	movw	r24, r20
 298:	82 2b       	or	r24, r18
 29a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 i2c__start(LED_INDICATORS);
 29e:	8b e3       	ldi	r24, 0x3B	; 59
 2a0:	0e 94 66 00 	call	0xcc	; 0xcc <i2c__start>
			 i2c__write(bitstate);
 2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a8:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c__write>
			 i2c__stop();
 2ac:	0e 94 8b 00 	call	0x116	; 0x116 <i2c__stop>
 2b0:	21 96       	adiw	r28, 0x01	; 1
		 }
		 i2c__start(LED_INDICATORS);
		 i2c__write(bitstate);
		 i2c__stop();
	 }
	 for (uint8_t i = 0; i<3; i++){
 2b2:	c3 30       	cpi	r28, 0x03	; 3
 2b4:	d1 05       	cpc	r29, r1
 2b6:	11 f6       	brne	.-124    	; 0x23c <__vector_11+0x11e>
 2b8:	0e c0       	rjmp	.+28     	; 0x2d6 <__vector_11+0x1b8>
 2ba:	0f 2e       	mov	r0, r31
 2bc:	f4 e0       	ldi	r31, 0x04	; 4
 2be:	ef 2e       	mov	r14, r31
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	ff 2e       	mov	r15, r31
 2c4:	f0 2d       	mov	r31, r0
 2c6:	01 e0       	ldi	r16, 0x01	; 1
 2c8:	11 e0       	ldi	r17, 0x01	; 1
		 rpm_flag = 0;
	 }
	 timerTick++;
	 if (timerTick >= 100){
		 timerTick = 0;
		 bitstate =0b00000000;
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
		 i2c__write(bitstate);
		 i2c__stop();
	 }
	 for (uint8_t i = 0; i<3; i++){
		 if (timerTick == left_duty_cyles[i]){
			 bitstate |= (1<<i);
 2ce:	cc 24       	eor	r12, r12
 2d0:	c3 94       	inc	r12
 2d2:	d1 2c       	mov	r13, r1
 2d4:	b3 cf       	rjmp	.-154    	; 0x23c <__vector_11+0x11e>
			 i2c__write(bitstate);
			 i2c__stop();
		 }
	 }

 }
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	df 90       	pop	r13
 2fc:	cf 90       	pop	r12
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <timer__init>:

 void timer__init(){
	 // TIMER 1 for interrupt frequency 10000 Hz:
	 cli();
 308:	f8 94       	cli
	 TCCR1A = 0;
 30a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	 TCCR1B = 0;
 30e:	e1 e8       	ldi	r30, 0x81	; 129
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	10 82       	st	Z, r1
	 TCNT1  = 0;
 314:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 318:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	 OCR1A = 1999;
 31c:	8f ec       	ldi	r24, 0xCF	; 207
 31e:	97 e0       	ldi	r25, 0x07	; 7
 320:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 324:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	 TCCR1B |= (1 << WGM12);
 328:	80 81       	ld	r24, Z
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	80 83       	st	Z, r24
	 TCCR1B |= (0 << CS12) | (0 << CS11) | (1 << CS10);
 32e:	80 81       	ld	r24, Z
 330:	81 60       	ori	r24, 0x01	; 1
 332:	80 83       	st	Z, r24
	 TIMSK1 |= (1 << OCIE1A);
 334:	ef e6       	ldi	r30, 0x6F	; 111
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	82 60       	ori	r24, 0x02	; 2
 33c:	80 83       	st	Z, r24
	 sei();
 33e:	78 94       	sei
 340:	08 95       	ret

00000342 <left_rgb__set>:
 }

 void left_rgb__set(const uint16_t color[]){
 342:	dc 01       	movw	r26, r24
	 for (uint8_t i = 0; i < 3; i++){
		 left_duty_cyles[i] = color[i];
 344:	e4 e0       	ldi	r30, 0x04	; 4
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	8c 91       	ld	r24, X
 34a:	80 83       	st	Z, r24
 34c:	12 96       	adiw	r26, 0x02	; 2
 34e:	8c 91       	ld	r24, X
 350:	12 97       	sbiw	r26, 0x02	; 2
 352:	81 83       	std	Z+1, r24	; 0x01
 354:	14 96       	adiw	r26, 0x04	; 4
 356:	8c 91       	ld	r24, X
 358:	82 83       	std	Z+2, r24	; 0x02
 35a:	08 95       	ret

0000035c <right_rgb__set>:
	 }
 }
 void right_rgb__set(const uint16_t color[]){
 35c:	dc 01       	movw	r26, r24
	 for (uint8_t i = 0; i < 3; i++){
		 right_duty_cyles[i] = color[i];
 35e:	e1 e0       	ldi	r30, 0x01	; 1
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	8c 91       	ld	r24, X
 364:	80 83       	st	Z, r24
 366:	12 96       	adiw	r26, 0x02	; 2
 368:	8c 91       	ld	r24, X
 36a:	12 97       	sbiw	r26, 0x02	; 2
 36c:	81 83       	std	Z+1, r24	; 0x01
 36e:	14 96       	adiw	r26, 0x04	; 4
 370:	8c 91       	ld	r24, X
 372:	82 83       	std	Z+2, r24	; 0x02
 374:	08 95       	ret

00000376 <left_indicator__set>:
	 }
 }

 void left_indicator__set(uint8_t status){
	 left_indicator_flag = status;
 376:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <left_indicator_flag>
 37a:	08 95       	ret

0000037c <right_indicator__set>:
 }
 void right_indicator__set(uint8_t status){
	 right_indicator_flag = status;
 37c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <right_indicator_flag>
 380:	08 95       	ret

00000382 <rpm__set>:
 }

 void rpm__set(uint16_t LED_PATTERN){
	 byte1 = (LED_PATTERN & 0xff), byte2 = (LED_PATTERN >>8);
 382:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <byte1>
 386:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <byte2>
	 rpm_flag = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <rpm_flag>
 390:	08 95       	ret

00000392 <main>:
LCD_D5 = (1<<D5), //(1<<5)
LCD_D6 = (1<<D6), //(1<<6)
LCD_D7 = (1<<D7); //(1<<7)

int main(void) {
	i2c__init();
 392:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c__init>
	timer__init();
 396:	0e 94 84 01 	call	0x308	; 0x308 <timer__init>

	rpm__set(0b1111111111111111);
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	9f ef       	ldi	r25, 0xFF	; 255
 39e:	0e 94 c1 01 	call	0x382	; 0x382 <rpm__set>
	left_rgb__set(BLACK);
 3a2:	8d e0       	ldi	r24, 0x0D	; 13
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(BLACK);
 3aa:	8d e0       	ldi	r24, 0x0D	; 13
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
	left_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 bb 01 	call	0x376	; 0x376 <left_indicator__set>
	right_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 be 01 	call	0x37c	; 0x37c <right_indicator__set>
	_delay_ms(300);

	uint16_t status = 0b1111111111111111;
	
	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 3be:	ee 24       	eor	r14, r14
 3c0:	e3 94       	inc	r14
 3c2:	f1 2c       	mov	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c4:	2f e7       	ldi	r18, 0x7F	; 127
 3c6:	8f e4       	ldi	r24, 0x4F	; 79
 3c8:	92 e1       	ldi	r25, 0x12	; 18
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0x38>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x42>
 3d4:	00 00       	nop
	right_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON

    while (1) 
    {
	_delay_ms(300);
	rpm__set(0b0000000011111111);
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 c1 01 	call	0x382	; 0x382 <rpm__set>
 3de:	2f e7       	ldi	r18, 0x7F	; 127
 3e0:	8f e4       	ldi	r24, 0x4F	; 79
 3e2:	92 e1       	ldi	r25, 0x12	; 18
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x52>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x5c>
 3ee:	00 00       	nop
	_delay_ms(300);
	rpm__set(0b1111111100000000);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	9f ef       	ldi	r25, 0xFF	; 255
 3f4:	0e 94 c1 01 	call	0x382	; 0x382 <rpm__set>
 3f8:	2f e7       	ldi	r18, 0x7F	; 127
 3fa:	8f e4       	ldi	r24, 0x4F	; 79
 3fc:	92 e1       	ldi	r25, 0x12	; 18
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x6c>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
	_delay_ms(300);

	uint16_t status = 0b1111111111111111;
	
	for(int i = 0; i < 16; i++) {
 40a:	00 e0       	ldi	r16, 0x00	; 0
 40c:	10 e0       	ldi	r17, 0x00	; 0
	rpm__set(0b0000000011111111);
	_delay_ms(300);
	rpm__set(0b1111111100000000);
	_delay_ms(300);

	uint16_t status = 0b1111111111111111;
 40e:	cf ef       	ldi	r28, 0xFF	; 255
 410:	df ef       	ldi	r29, 0xFF	; 255
	
	for(int i = 0; i < 16; i++) {
		status &= ~(1<<i);
 412:	c7 01       	movw	r24, r14
 414:	00 2e       	mov	r0, r16
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
 422:	90 95       	com	r25
 424:	c8 23       	and	r28, r24
 426:	d9 23       	and	r29, r25
		rpm__set(status);
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 c1 01 	call	0x382	; 0x382 <rpm__set>
 42e:	2f e7       	ldi	r18, 0x7F	; 127
 430:	8a e1       	ldi	r24, 0x1A	; 26
 432:	96 e0       	ldi	r25, 0x06	; 6
 434:	21 50       	subi	r18, 0x01	; 1
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	90 40       	sbci	r25, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
	rpm__set(0b1111111100000000);
	_delay_ms(300);

	uint16_t status = 0b1111111111111111;
	
	for(int i = 0; i < 16; i++) {
 440:	0f 5f       	subi	r16, 0xFF	; 255
 442:	1f 4f       	sbci	r17, 0xFF	; 255
 444:	00 31       	cpi	r16, 0x10	; 16
 446:	11 05       	cpc	r17, r1
 448:	21 f7       	brne	.-56     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 44a:	00 e1       	ldi	r16, 0x10	; 16
 44c:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
		status |= (1<<i);
 44e:	c7 01       	movw	r24, r14
 450:	00 2e       	mov	r0, r16
 452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	0a 94       	dec	r0
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	c8 2b       	or	r28, r24
 45e:	d9 2b       	or	r29, r25
		rpm__set(status);
 460:	ce 01       	movw	r24, r28
 462:	0e 94 c1 01 	call	0x382	; 0x382 <rpm__set>
 466:	2f e7       	ldi	r18, 0x7F	; 127
 468:	8a e1       	ldi	r24, 0x1A	; 26
 46a:	96 e0       	ldi	r25, 0x06	; 6
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 476:	00 00       	nop
		rpm__set(status);
		_delay_ms(100);

	}
	
	for(int i = 16; i >= 0; i--) {
 478:	01 50       	subi	r16, 0x01	; 1
 47a:	11 09       	sbc	r17, r1
 47c:	40 f7       	brcc	.-48     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	right_rgb__set(BLACK);
	_delay_ms(500);
	*/
	
	
	left_rgb__set(ORANGE);
 47e:	81 e3       	ldi	r24, 0x31	; 49
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(BLACK);
 486:	8d e0       	ldi	r24, 0x0D	; 13
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 48e:	8f e7       	ldi	r24, 0x7F	; 127
 490:	9f e4       	ldi	r25, 0x4F	; 79
 492:	22 e1       	ldi	r18, 0x12	; 18
 494:	81 50       	subi	r24, 0x01	; 1
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	20 40       	sbci	r18, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(PINK);
 4a0:	87 e0       	ldi	r24, 0x07	; 7
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(VIOLET);
 4a8:	85 e2       	ldi	r24, 0x25	; 37
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 4b0:	8f e7       	ldi	r24, 0x7F	; 127
 4b2:	9f e4       	ldi	r25, 0x4F	; 79
 4b4:	22 e1       	ldi	r18, 0x12	; 18
 4b6:	81 50       	subi	r24, 0x01	; 1
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	20 40       	sbci	r18, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(WHITE);
 4c2:	83 e1       	ldi	r24, 0x13	; 19
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(ORANGE);
 4ca:	81 e3       	ldi	r24, 0x31	; 49
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 4d2:	8f e7       	ldi	r24, 0x7F	; 127
 4d4:	9f e4       	ldi	r25, 0x4F	; 79
 4d6:	22 e1       	ldi	r18, 0x12	; 18
 4d8:	81 50       	subi	r24, 0x01	; 1
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	20 40       	sbci	r18, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e2:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(GREEN);
 4e4:	8b e2       	ldi	r24, 0x2B	; 43
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(RED);
 4ec:	87 e3       	ldi	r24, 0x37	; 55
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 4f4:	8f e7       	ldi	r24, 0x7F	; 127
 4f6:	9f e4       	ldi	r25, 0x4F	; 79
 4f8:	22 e1       	ldi	r18, 0x12	; 18
 4fa:	81 50       	subi	r24, 0x01	; 1
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	20 40       	sbci	r18, 0x00	; 0
 500:	e1 f7       	brne	.-8      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 504:	00 00       	nop
	_delay_ms(300);
	left_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 bb 01 	call	0x376	; 0x376 <left_indicator__set>
	right_indicator__set(0); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 be 01 	call	0x37c	; 0x37c <right_indicator__set>
	left_rgb__set(MAGENTA);
 512:	89 e1       	ldi	r24, 0x19	; 25
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(CYAN);
 51a:	8f e1       	ldi	r24, 0x1F	; 31
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 522:	8f e7       	ldi	r24, 0x7F	; 127
 524:	9f e4       	ldi	r25, 0x4F	; 79
 526:	22 e1       	ldi	r18, 0x12	; 18
 528:	81 50       	subi	r24, 0x01	; 1
 52a:	90 40       	sbci	r25, 0x00	; 0
 52c:	20 40       	sbci	r18, 0x00	; 0
 52e:	e1 f7       	brne	.-8      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 530:	00 c0       	rjmp	.+0      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 532:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(CYAN);
 534:	8f e1       	ldi	r24, 0x1F	; 31
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(MAGENTA);
 53c:	89 e1       	ldi	r24, 0x19	; 25
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 544:	8f e7       	ldi	r24, 0x7F	; 127
 546:	9f e4       	ldi	r25, 0x4F	; 79
 548:	22 e1       	ldi	r18, 0x12	; 18
 54a:	81 50       	subi	r24, 0x01	; 1
 54c:	90 40       	sbci	r25, 0x00	; 0
 54e:	20 40       	sbci	r18, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 554:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(RED);
 556:	87 e3       	ldi	r24, 0x37	; 55
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(GREEN);
 55e:	8b e2       	ldi	r24, 0x2B	; 43
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 566:	8f e7       	ldi	r24, 0x7F	; 127
 568:	9f e4       	ldi	r25, 0x4F	; 79
 56a:	22 e1       	ldi	r18, 0x12	; 18
 56c:	81 50       	subi	r24, 0x01	; 1
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	20 40       	sbci	r18, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 574:	00 c0       	rjmp	.+0      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 576:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(ORANGE);
 578:	81 e3       	ldi	r24, 0x31	; 49
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(VIOLET);
 580:	85 e2       	ldi	r24, 0x25	; 37
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 588:	8f e7       	ldi	r24, 0x7F	; 127
 58a:	9f e4       	ldi	r25, 0x4F	; 79
 58c:	22 e1       	ldi	r18, 0x12	; 18
 58e:	81 50       	subi	r24, 0x01	; 1
 590:	90 40       	sbci	r25, 0x00	; 0
 592:	20 40       	sbci	r18, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 596:	00 c0       	rjmp	.+0      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 598:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(VIOLET);
 59a:	85 e2       	ldi	r24, 0x25	; 37
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(WHITE);
 5a2:	83 e1       	ldi	r24, 0x13	; 19
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 5aa:	8f e7       	ldi	r24, 0x7F	; 127
 5ac:	9f e4       	ldi	r25, 0x4F	; 79
 5ae:	22 e1       	ldi	r18, 0x12	; 18
 5b0:	81 50       	subi	r24, 0x01	; 1
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	20 40       	sbci	r18, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5ba:	00 00       	nop
	_delay_ms(300);
	left_rgb__set(BLACK);
 5bc:	8d e0       	ldi	r24, 0x0D	; 13
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(ORANGE);
 5c4:	81 e3       	ldi	r24, 0x31	; 49
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 5cc:	8f e7       	ldi	r24, 0x7F	; 127
 5ce:	9f e4       	ldi	r25, 0x4F	; 79
 5d0:	22 e1       	ldi	r18, 0x12	; 18
 5d2:	81 50       	subi	r24, 0x01	; 1
 5d4:	90 40       	sbci	r25, 0x00	; 0
 5d6:	20 40       	sbci	r18, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5dc:	00 00       	nop
	_delay_ms(300);
	left_indicator__set(0);
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	0e 94 bb 01 	call	0x376	; 0x376 <left_indicator__set>
	right_indicator__set(1); //TURN OFF BLUE LED #1 NOTE THAT 1 = OFF. 0 = ON
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 be 01 	call	0x37c	; 0x37c <right_indicator__set>
 5ea:	8f e7       	ldi	r24, 0x7F	; 127
 5ec:	9f e4       	ldi	r25, 0x4F	; 79
 5ee:	22 e1       	ldi	r18, 0x12	; 18
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	20 40       	sbci	r18, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 5fa:	00 00       	nop
	_delay_ms(300);
	left_indicator__set(1);
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 bb 01 	call	0x376	; 0x376 <left_indicator__set>
	right_indicator__set(1);
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	0e 94 be 01 	call	0x37c	; 0x37c <right_indicator__set>
	left_rgb__set(BLACK);
 608:	8d e0       	ldi	r24, 0x0D	; 13
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	0e 94 a1 01 	call	0x342	; 0x342 <left_rgb__set>
	right_rgb__set(BLACK);
 610:	8d e0       	ldi	r24, 0x0D	; 13
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	0e 94 ae 01 	call	0x35c	; 0x35c <right_rgb__set>
 618:	8f e7       	ldi	r24, 0x7F	; 127
 61a:	9f e4       	ldi	r25, 0x4F	; 79
 61c:	22 e1       	ldi	r18, 0x12	; 18
 61e:	81 50       	subi	r24, 0x01	; 1
 620:	90 40       	sbci	r25, 0x00	; 0
 622:	20 40       	sbci	r18, 0x00	; 0
 624:	e1 f7       	brne	.-8      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 626:	00 c0       	rjmp	.+0      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 628:	00 00       	nop
 62a:	cc ce       	rjmp	.-616    	; 0x3c4 <main+0x32>

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
